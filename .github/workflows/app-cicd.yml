# use tagging
# use oidc role

name: Application-CICD

on:
  push:
    branches:
     - main
    paths:
     - 'src/**'
     
permissions:
    id-token: write   
    contents: read
    
jobs:

  CICD:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest
    
    # Set Image tag as github.sha
    env:
      IMAGE_TAG: ${{ github.sha }}
      
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:

       # Checkout your respository
      - name: Checkout 
        uses: actions/checkout@v3

       # Set up Java
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
          
        # Build Maven project
      - name: Build Maven project
        run: |
          mvn -B package --file pom.xml
          mkdir staging && cp target/*.jar staging

        # Upload Artificats
     # - name: Upload Artificats
     #   uses: actions/upload-artifact@v3
     #   with:
     #     name: java-artifacts
     #     path: staging
         
        # Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
         aws-region: eu-central-1
         
   #   - name: Configure aws credentials
   #     uses: aws-actions/configure-aws-credentials@v2
   #     with:
   #       role-to-assume: arn:aws:iam::000022203321:role/OIDC-ASSUMEROLE-GITHUB-INFRA-CICD-SANDBOX
   #       role-session-name: Sandbox-session
   #       aws-region: eu-central-1

        # Login to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        
        # Build, tag, and push the image to Amazon ECR
      - name: Build, tag, and push the image to Amazon ECR
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         ECR_REPOSITORY: ideabank
         #IMAGE_TAG: v3
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG       
      
        # Update Image tag in k8 yml file
      - name: Update Image tag in k8 yml file
        uses: cschleiden/replace-tokens@v1
        with:
          files: 'depservice.yml'
        env:
           Version: ${{ env.IMAGE_TAG }}
         
      - name: check image tag     
        run: cat depservice.yml
     
       # EKS Cluster Authentication
      - name: EKS Cluster Authentication
        run: aws eks update-kubeconfig --name my-eks --region eu-central-1

         # Deploy image to Amazon EKS
      - name: Deploy image to Amazon EKS
        run: |
          kubectl apply -f depservice.yml
          
         

